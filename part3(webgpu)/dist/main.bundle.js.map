{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://part3(webgpu)/./src/sprite.wgsl","webpack://part3(webgpu)/./src/updateSprite.wgsl","webpack://part3(webgpu)/webpack/bootstrap","webpack://part3(webgpu)/webpack/runtime/define property getters","webpack://part3(webgpu)/webpack/runtime/hasOwnProperty shorthand","webpack://part3(webgpu)/webpack/runtime/make namespace object","webpack://part3(webgpu)/./src/main.ts"],"sourcesContent":["export default \"// Renders a particle at its position\\r\\n[[stage(vertex)]]\\r\\nfn vert_main([[location(0)]] particlePos : vec2<f32>) -> [[builtin(position)]] vec4<f32> {  \\r\\n    return vec4<f32>(particlePos, 0.0, 1.0);\\r\\n}\\r\\n\\r\\n// Determines color of each object\\r\\n[[stage(fragment)]] \\r\\nfn frag_main() -> [[location(0)]] vec4<f32> {\\r\\n    return vec4<f32>(1.0, 1.0, 1.0, 1.0);\\r\\n}\";","export default \"struct Particle {\\r\\n    pos : vec2<f32>;\\r\\n};\\r\\n\\r\\n[[block]] struct Particles {\\r\\n    particles : [[stride(8)]] array<Particle>;\\r\\n};\\r\\n\\r\\n[[binding(0), group(0)]] var<storage, read_write> particlesA : Particles;\\r\\n\\r\\n[[stage(compute), workgroup_size(64)]]\\r\\nfn main([[builtin(global_invocation_id)]] GlobalInvocationID : vec3<u32>) {\\r\\n    var index : u32 = GlobalInvocationID.x;\\r\\n\\r\\n    // Get position of current particle\\r\\n    var vPos = particlesA.particles[index].pos;\\r\\n\\r\\n    // ADD YOUR COMPUTATION HERE\\r\\n    //\\r\\n    //\\r\\n    //\\r\\n    //\\r\\n    //\\r\\n        \\r\\n    // Example Computation (DELETE THIS)\\r\\n    vPos.x = vPos.x + 0.001;\\r\\n    vPos.y = vPos.y + 0.001;\\r\\n\\r\\n    // Write new particle data\\r\\n    particlesA.particles[index].pos = vPos;\\r\\n}\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\r\n*   CSE 113 Assignment 5 Part 3\r\n*   WebGPU\r\n*/\r\n\r\nimport spriteWGSL from './sprite.wgsl';\r\nimport updateSpriteWGSL from './updateSprite.wgsl';\r\n\r\nexport const main = async() => {\r\n    \r\n    // Number of particles\r\n    const NUMPARTICLES = 1500;\r\n    \r\n    // Set up canvas and other devices\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu.requestAdapter() as GPUAdapter;       \r\n    const device = await adapter.requestDevice() as GPUDevice;\r\n\r\n    const context = canvas.getContext('webgpu');\r\n    const format = 'bgra8unorm';\r\n\r\n    context.configure({\r\n        device: device,\r\n        format: format,\r\n    });\r\n\r\n    // Read from sprite.wgsl and create a pipeline for rendering\r\n    const spriteShaderModule = device.createShaderModule({ code: spriteWGSL });\r\n    const renderPipeline = device.createRenderPipeline({\r\n        vertex: {\r\n            module: spriteShaderModule,\r\n            entryPoint: 'vert_main',\r\n            buffers: [\r\n                {\r\n                    arrayStride: 2 * 4,\r\n                    attributes: [\r\n                        {\r\n                            shaderLocation: 0,\r\n                            offset: 0,\r\n                            format: 'float32x2',\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        fragment: {\r\n            module: spriteShaderModule,\r\n            entryPoint: 'frag_main',\r\n            targets: [\r\n                {\r\n                    format: format as GPUTextureFormat\r\n                },\r\n            ],\r\n        },\r\n        primitive: { // Chooses which type of shape \r\n            topology: 'point-list'\r\n        },\r\n    })\r\n\r\n    // Read from updateSprite.wgsl and create a pipeline for computing\r\n    const computePipeline = device.createComputePipeline({\r\n        compute: {\r\n            module: device.createShaderModule({\r\n                code: updateSpriteWGSL,\r\n            }),\r\n            entryPoint: 'main',\r\n        }\r\n    })\r\n\r\n    // Create an array to store each particles' position value\r\n    const particlesData = new Float32Array(NUMPARTICLES * 2);\r\n    \r\n    // Go through all particles then declare their initial position in canvas\r\n    for (let i = 0; i < NUMPARTICLES; ++i) {\r\n        // Get random position of each particle\r\n        // Values are between -1 to 1\r\n        particlesData[2 * i] = 2 * (Math.random() - 0.5); // X position\r\n        particlesData[2 * i + 1] = 2 * (Math.random() - 0.5); // Y position\r\n    }\r\n\r\n    // Create a buffer for particles \r\n    const particleBuffer: GPUBuffer = device.createBuffer({\r\n        size: particlesData.byteLength,\r\n        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\r\n        mappedAtCreation: true,\r\n    })\r\n    new Float32Array(particleBuffer.getMappedRange()).set(particlesData);\r\n    particleBuffer.unmap();\r\n\r\n    // Create a bind group\r\n    const particleBindGroup: GPUBindGroup = device.createBindGroup({\r\n        layout: computePipeline.getBindGroupLayout(0),\r\n        entries: [\r\n            {\r\n                binding: 0,\r\n                resource: {\r\n                    buffer: particleBuffer,\r\n                    offset: 0,\r\n                    size: particlesData.byteLength\r\n                }\r\n            }\r\n        ]\r\n    })\r\n\r\n    // Variables for performance measurement (fps)\r\n    var updatePerformance = true;\r\n    var currentTime, previousTime;\r\n    currentTime = previousTime = performance.now();\r\n    var totalFramePerSecond = 0;\r\n    var frameCounter = 0;\r\n\r\n    function frame() {\r\n        const textureView = context.getCurrentTexture().createView();\r\n        const renderPassDescriptor: GPURenderPassDescriptor = {\r\n            colorAttachments: [\r\n                {\r\n                    view: textureView,\r\n                    loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 }, //background color\r\n                    storeOp: 'store'\r\n                }\r\n            ]\r\n        }\r\n            \r\n        const commandEncoder = device.createCommandEncoder();\r\n        {\r\n            // Computation\r\n            const passEncoder = commandEncoder.beginComputePass();\r\n            passEncoder.setPipeline(computePipeline);\r\n            passEncoder.setBindGroup(0, particleBindGroup);\r\n            passEncoder.dispatch(Math.ceil(NUMPARTICLES / 64));\r\n            passEncoder.endPass();\r\n        }\r\n        {\r\n            // Rendering\r\n            const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n            passEncoder.setPipeline(renderPipeline);\r\n            passEncoder.setVertexBuffer(0, particleBuffer);\r\n            passEncoder.draw(NUMPARTICLES);\r\n            passEncoder.endPass();      \r\n        }\r\n        // Finished rendering\r\n        device.queue.submit([commandEncoder.finish()]); \r\n        \r\n        // Measure performance\r\n        currentTime = performance.now();\r\n        var elapsedTime = currentTime - previousTime;\r\n        previousTime = currentTime;\r\n        var framePerSecond = Math.round(1 / (elapsedTime / 1000));\r\n        totalFramePerSecond += framePerSecond;\r\n        frameCounter++;\r\n            \r\n        if(updatePerformance) {\r\n            updatePerformance = false;\r\n\r\n            let averageFramePerSecond = Math.round(totalFramePerSecond / frameCounter);\r\n            \r\n            frameCounter = 0;\r\n            totalFramePerSecond = 0;\r\n\r\n            document.getElementById(\"fps\")!.innerHTML = `FPS:  ${averageFramePerSecond}`;\r\n\r\n            setTimeout(() => {\r\n                updatePerformance = true;\r\n            }, 50); // update FPS every 50ms\r\n        }\r\n\r\n        requestAnimationFrame(frame);\r\n    }\r\n    requestAnimationFrame(frame);\r\n}\r\nmain();"],"names":[],"sourceRoot":""}